services:
  postgres:
    image: pgvector/pgvector:0.8.1-pg18-trixie
    container_name: companion_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-companion_db}
      POSTGRES_USER: ${POSTGRES_USER:-companion}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-companion_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/migrations
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U companion -d companion_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:v1.15.4
    container_name: companion_qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "${QDRANT_HTTP_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/6333' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:8.2.1-alpine
    container_name: companion_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  letta:
    image: letta/letta:0.11.7
    container_name: companion_letta
    environment:
      - LETTA_SERVER_PORT=8283
      - LETTA_SERVER_HOST=0.0.0.0
    volumes:
      - letta_data:/app/data
    ports:
      - "${LETTA_SERVER_PORT:-18283}:8283"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8283/v1/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  embedding_service:
    build:
      context: ./embedding_service
      dockerfile: Dockerfile
    container_name: companion_embedding_service
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=${REDIS_URL}
      - EMBEDDING_SERVICE_HOST=${EMBEDDING_SERVICE_HOST}
      - EMBEDDING_SERVICE_PORT=${EMBEDDING_SERVICE_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - ./embedding_service:/app_root/embedding_service
    ports:
      - "${EMBEDDING_SERVICE_PORT:-8002}:${EMBEDDING_SERVICE_PORT:-8002}"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:$${EMBEDDING_SERVICE_PORT:-8002}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - redis

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: companion_gateway
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - QDRANT_URL=${QDRANT_URL}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - CHUTES_API_KEY=${CHUTES_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - LETTA_SERVER_URL=${LETTA_SERVER_URL}
      - GATEWAY_HOST=${GATEWAY_HOST}
      - GATEWAY_PORT=${GATEWAY_PORT}
      - PRIMARY_LLM_MODEL=${PRIMARY_LLM_MODEL}
      - FALLBACK_LLM_MODEL=${FALLBACK_LLM_MODEL}
      - SCORING_LLM_MODEL=${SCORING_LLM_MODEL}
      - EMBEDDING_DIMENSIONS=${EMBEDDING_DIMENSIONS}
      - PAD_DRIFT_RATE=${PAD_DRIFT_RATE}
      - QUIRK_DECAY_RATE=${QUIRK_DECAY_RATE}
      - QUIRK_REINFORCEMENT_RATE=${QUIRK_REINFORCEMENT_RATE}
      - SECURITY_CONFIDENCE_THRESHOLD=${SECURITY_CONFIDENCE_THRESHOLD}
      - SECURITY_OFFENSE_WINDOW_DAYS=${SECURITY_OFFENSE_WINDOW_DAYS}
      - MAX_PROACTIVE_PER_DAY=${MAX_PROACTIVE_PER_DAY}
      - DB_POOL_MIN_SIZE=${DB_POOL_MIN_SIZE}
      - DB_POOL_MAX_SIZE=${DB_POOL_MAX_SIZE}
      - REDIS_POOL_SIZE=${REDIS_POOL_SIZE}
      - MAX_REFLECTION_BATCH_SIZE=${MAX_REFLECTION_BATCH_SIZE}
      - MAX_CONCURRENT_AI_CALLS=${MAX_CONCURRENT_AI_CALLS}
      - ENVIRONMENT=${ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./gateway:/app_root/gateway
    ports:
      - "${GATEWAY_PORT:-8000}:${GATEWAY_PORT:-8000}"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:$${GATEWAY_PORT:-8000}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
      letta:
        condition: service_healthy
      embedding_service:
        condition: service_healthy

  discord_bot:
    build:
      context: ./discord_bot
      dockerfile: Dockerfile
    container_name: companion_discord_bot
    environment:
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - GATEWAY_URL=http://gateway:${GATEWAY_PORT}
      - DISCORD_BOT_PORT=${DISCORD_BOT_PORT}
      - ENVIRONMENT=${ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./discord_bot:/root_app/discord_bot
    restart: unless-stopped
    depends_on:
      - gateway

volumes:
  postgres_data:
  qdrant_data:
  redis_data:
  letta_data:
